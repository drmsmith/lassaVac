{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        2,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)",
        "\r \u001B[32m■■■■■■■                         \u001B[39m  20% |  ETA:  6s\r\r \u001B[32m■■■■■■■■■■■■■                   \u001B[39m  40% |  ETA:  3s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■             \u001B[39m  60% |  ETA:  2s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001B[39m  80% |  ETA:  1s\r\r                                                   \r",
        "Error in exists(.dest_dir) : invalid first argument\n",
        "Called from: exists(.dest_dir)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = '', ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('dest_dir does not exist:\\n', .dest_dir, sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)",
        "\r \u001B[32m■■■■■■■■■■■■■■■■■■■             \u001B[39m  60% |  ETA:  1s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001B[39m  80% |  ETA:  1s\r\r                                                   \r",
        "Error in exists(.dest_dir) : invalid first argument\n",
        "Called from: exists(.dest_dir)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "exists('')",
        "Error in exists(\"\") : invalid first argument\n",
        "> ",
        "exists('erg')",
        "[1] FALSE\n",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T | exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('dest_dir does not exist:\\n', .dest_dir, sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)",
        "Error in exists(.dest_dir) : invalid first argument\n",
        "Called from: exists(.dest_dir)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T || exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('dest_dir does not exist:\\n', .dest_dir, sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)",
        "\r \u001B[32m■■■■■■■■■■■■■                   \u001B[39m  40% |  ETA:  2s\r\r                                                   \r",
        "Error in f_gravity_model_run(.n_spread_matrices = 5, .save_res = T) : \n  dest_dir does not exist:\n",
        "Called from: f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T || exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('dest_dir does not exist:\\n\"', .dest_dir,'\"', sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)",
        "\r \u001B[32m■■■■■■■■■■■■■■■■■■■             \u001B[39m  60% |  ETA:  1s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001B[39m  80% |  ETA:  1s\r\r                                                   \r",
        "Error in f_gravity_model_run(.n_spread_matrices = 5, .save_res = T) : \n  dest_dir does not exist:\n\"\"\n",
        "Called from: f_gravity_model_run(.n_spread_matrices = 5, .save_res = T)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "is.null(.dest_dir)",
        "Error: object '.dest_dir' not found\n",
        "> ",
        "exists(NULL)",
        "Error in exists(NULL) : invalid first argument\n",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = 'chikX/res')",
        "Error in f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = \"chikX/res\") : \n  dest_dir does not exist:\n\"chikX/res\"\n",
        "Called from: f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = \"chikX/res\")\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T || exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('invalid dest_dir:\\n\"', .dest_dir,'\"', sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = 'chikX/res/')",
        "Error in f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = \"chikX/res/\") : \n  invalid dest_dir:\n\"chikX/res/\"\n",
        "Called from: f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = \"chikX/res/\")\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "exists('chikX/res/')",
        "[1] FALSE\n",
        "> ",
        "file.exists('chikX/res/')",
        "[1] TRUE\n",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T || file.exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('invalid dest_dir:\\n\"', .dest_dir,'\"', sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "file.exists('chikX/res')",
        "[1] TRUE\n",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T || file.exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('invalid dest_dir:\\n\"', .dest_dir,'\"', sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = 'chikX/res')",
        "\r \u001B[32m■■■■■■■■■■■■■                   \u001B[39m  40% |  ETA:  2s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■             \u001B[39m  60% |  ETA:  2s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001B[39m  80% |  ETA:  1s\r\r                                                   \r",
        "Error in psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep = \"\") : \n  could not find function \"psate\"\n",
        "Called from: save(list_gravity_spread, file = psate(.dest_dir, \"/inputs_list_gravity_spread.RData\", \n    sep = \"\"))\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# runs gravity model for desired number of iterations ",
        "> ",
        "# can save output ",
        "> ",
        "f_gravity_model_run = function(",
        "+ ",
        "        .n_spread_matrices = 100, ",
        "+ ",
        "        .duration_spread = 365*2,",
        "+ ",
        "        .df_catchments = df_burden, ",
        "+ ",
        "        .save_res = F, ",
        "+ ",
        "        .dest_dir = NULL, ",
        "+ ",
        "        .print_res = F # will slow down running the model",
        "+ ",
        ") {",
        "+ ",
        "    # takes about 2-3 min to run ",
        "+ ",
        "    # has a progress bar ",
        "+ ",
        "    list_gravity_spread = purrr::map(",
        "+ ",
        "        1:.n_spread_matrices, # for 1:nreps do ",
        "+ ",
        "        function(gravity_i){",
        "+ ",
        "            # call f_gravity_model",
        "+ ",
        "            m_spread = f_gravity_model(",
        "+ ",
        "                duration_spread = .duration_spread, ",
        "+ ",
        "                df_catchments = .df_catchments",
        "+ ",
        "                )",
        "+ ",
        "            if (.print_res == T) {",
        "+ ",
        "                print(paste0(",
        "+ ",
        "                    \"on stochastic gravity run \", gravity_i, \" of \", .n_spread_matrices",
        "+ ",
        "                    ))",
        "+ ",
        "                spread_sums = apply(m_spread, 1, function(row) sum(row!=0))",
        "+ ",
        "                spread_sums[spread_sums!=0] %>% sort(decreasing = T) %>% print",
        "+ ",
        "            }",
        "+ ",
        "            return(m_spread)",
        "+ ",
        "        }, ",
        "+ ",
        "        .progress=T)",
        "+ ",
        "",
        "+ ",
        "    #### SAVE OUTPUT ####     ",
        "+ ",
        "    if (.save_res == T){",
        "+ ",
        "        if (is.null(.dest_dir)==T || file.exists(.dest_dir)==F) {",
        "+ ",
        "            stop(paste('invalid dest_dir:\\n\"', .dest_dir,'\"', sep='')) ",
        "+ ",
        "            } else {",
        "+ ",
        "                save(",
        "+ ",
        "                    list_gravity_spread,",
        "+ ",
        "                    file = paste(.dest_dir, \"/inputs_list_gravity_spread.RData\", sep='')",
        "+ ",
        "                )}",
        "+ ",
        "    } else return(list_gravity_spread)",
        "+ ",
        "}",
        "> ",
        "f_gravity_model_run(.n_spread_matrices = 5, .save_res = T, .dest_dir = 'chikX/res')",
        "\r \u001B[32m■■■■■■■■■■■■■                   \u001B[39m  40% |  ETA:  2s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■             \u001B[39m  60% |  ETA:  2s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001B[39m  80% |  ETA:  1s\r\r                                                   \r",
        "> ",
        "endsWith('ergjhtr.', '.')",
        "[1] TRUE\n",
        "> ",
        "if (!interactive()) {",
        "+ ",
        "    print('what')",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "file.exists('chikX/res/')",
        "[1] TRUE\n",
        "> ",
        "file.exists('chikX/res')",
        "[1] TRUE\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  object '.mat_mob' not found\n",
        "> ",
        "### Function for gravity model (daily probabiltiy of spread over assumed duration of spread)",
        "> ",
        "# duration spread given in days ",
        "> ",
        "f_gravity_model = function(",
        "+ ",
        "        duration_spread = .duration_spread, # in days ",
        "+ ",
        "        # regions/countries to loop over, needs code and p_spillover columns  ",
        "+ ",
        "        df_catchments = .df_catchments,",
        "+ ",
        "        # mobility matrix determining the probability of spread ",
        "+ ",
        "        # between any two locations ",
        "+ ",
        "        mat_mob_p = .mat_mob,",
        "+ ",
        "        .doPrint = F){ # for internal debigging ",
        "+ ",
        "    ",
        "+ ",
        "    # Matrix of spread across catchments (to be updated in loop with gravity model)",
        "+ ",
        "    m_spread = matrix(0, nrow = nrow(df_catchments), ncol = duration_spread)",
        "+ ",
        "    colnames(m_spread) = 1:duration_spread",
        "+ ",
        "    rownames(m_spread) = df_catchments$code",
        "+ ",
        "    ",
        "+ ",
        "    # identify first catchment, add to vector of infected catchments, update spread matrix",
        "+ ",
        "    catchment0 = sample(df_catchments$code, size = 1, prob = df_catchments$p_spillover)",
        "+ ",
        "    ",
        "+ ",
        "    vec_catchments_infected = catchment0",
        "+ ",
        "    ",
        "+ ",
        "    # fill rest of row with 1 (assumption is that catchments do not return to susceptible)",
        "+ ",
        "    m_spread[catchment0,] = 1",
        "+ ",
        "    ",
        "+ ",
        "    # go through outbreak and update matrices day-by-day",
        "+ ",
        "    for(date_i in 1:duration_spread){",
        "+ ",
        "        if(.doPrint == T){print(paste0(\"evaluating spread on day \", date_i))}",
        "+ ",
        "        ",
        "+ ",
        "        # for each catchment currently infected",
        "+ ",
        "        for(catchment_infect_j in vec_catchments_infected){",
        "+ ",
        "            # print(paste0(\"on day \", date_i, \", evaluating potential spread from \", catchment_infect_j))",
        "+ ",
        "            ",
        "+ ",
        "            # evaluate probability of spread to all catchments not currently infected",
        "+ ",
        "            for(catchment_suscept_k in df_catchments$code[!df_catchments$code %in% vec_catchments_infected]){",
        "+ ",
        "                ",
        "+ ",
        "                # gravity term --> MVT MATRIX ",
        "+ ",
        "                # p moving a->b",
        "+ ",
        "                # vaccine code (no vaccination for now -- keep )",
        "+ ",
        "                infect_i_j = rbinom(1, 1, .mat_mob[catchment_infect_j, catchment_suscept_k])",
        "+ ",
        "                ",
        "+ ",
        "                # if infected, update infected catchments and corresponding m_spread matrix",
        "+ ",
        "                if(infect_i_j == 1){",
        "+ ",
        "                    # print(paste0(",
        "+ ",
        "                    #     \"on day \", date_i, \" there was spread from \", ",
        "+ ",
        "                    #     catchment_infect_j, \" to \", catchment_suscept_k))",
        "+ ",
        "                    ",
        "+ ",
        "                    vec_catchments_infected = append(vec_catchments_infected, ",
        "+ ",
        "                                                     catchment_suscept_k)",
        "+ ",
        "                    ",
        "+ ",
        "                    m_spread[catchment_suscept_k, date_i:ncol(m_spread)] = 1",
        "+ ",
        "                }",
        "+ ",
        "            }",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    return(m_spread)",
        "+ ",
        "}",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  object '.mat_mob' not found\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  object '.mat_mob' not found\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  object '.mat_mob' not found\n",
        "\nRestarting R session...\n\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ───────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.3     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.4\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.0\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.4.3     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.2     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.0\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ─────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "The legacy packages maptools, rgdal, and rgeos, underpinning the sp package,\nwhich was just loaded, will retire in October 2023.\nPlease refer to R-spatial evolution reports for details, especially\nhttps://r-spatial.org/r/2023/05/15/evolution4.html.\nIt may be desirable to make the sf package available;\npackage maintainers should consider adding sf to Suggests:.\nThe sp package is now running under evolution status 2\n     (status 2 uses the sf package in place of rgdal)\n",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  object '.mat_mob' not found\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  argument \"mat_mob_p\" is missing, with no default\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  argument \"mat_mob_p\" is missing, with no default\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "Error in f_gravity_model(duration_spread = 365 * 2, df_catchments = df_burden) : \n  argument \"mat_mob_p\" is missing, with no default\n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `.f()`:\u001B[22m\n\u001B[33m!\u001B[39m argument \".df_catchments\" is missing, with no default\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `.f()`:\u001B[22m\n\u001B[33m!\u001B[39m argument \".df_catchments\" is missing, with no default\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `.f()`:\u001B[22m\n\u001B[33m!\u001B[39m argument \".df_catchments\" is missing, with no default\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "load('chikX/utils/CHIK-X_spread.R')",
        "Error in load(\"chikX/utils/CHIK-X_spread.R\") : \n  bad restore file magic number (file may be corrupted) -- no data loaded\n",
        "In addition: ",
        "Warning message:\n",
        "file ‘CHIK-X_spread.R’ has magic number 'libra'\n  Use of save versions prior to 2 is deprecated \n",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R', local = T)",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `.f()`:\u001B[22m\n\u001B[33m!\u001B[39m argument \".df_catchments\" is missing, with no default\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# load mobility matrix for country codes with mobility data ",
        "> ",
        "mat_mob_p = read.csv(\"LassaX/data_chik/mat_mob_prob.csv\")",
        "> ",
        "all_codes = colnames(mat_mob_p)",
        "> ",
        "rownames(mat_mob_p) = all_codes",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R', local = T)",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `.f()`:\u001B[22m\n\u001B[33m!\u001B[39m argument \".df_catchments\" is missing, with no default\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R', local = T)",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `f_gravity_model_run()`:\u001B[22m\n\u001B[33m!\u001B[39m object 'df_burden' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R', local = F)",
        "\u001B[1m\u001B[33mError\u001B[39m in `purrr::map()` at \u001B]8;line = 114:col = 4;file://C:\\Users\\sedar\\Documents\\Work Docs\\Oxford_BDI_2023\\CHIK-X\\lassaVac\\chikX\\utils\\CHIK-X_spread.R\u0007chikX/utils/CHIK-X_spread.R:114:4\u001B]8;;\u0007:\u001B[22m\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m In index: 1.\u001B[39m\n\u001B[1mCaused by error in `f_gravity_model_run()`:\u001B[22m\n\u001B[33m!\u001B[39m object 'df_burden' not found\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\nCalled from: signal_abort(cnd, .file)\n",
        "Browse[1]> ",
        "Q",
        "> ",
        "# run p_spillover.R to obtain the file below ",
        "> ",
        "# from df_burden which contains 205 UN-adj worldpop data per country ",
        "> ",
        "df_burden = read.csv('chikX/data/df_burden_with_pop_size_2015_spillover.csv')",
        "> ",
        "# load mobility matrix for country codes with mobility data ",
        "> ",
        "mat_mob_p = read.csv(\"LassaX/data_chik/mat_mob_prob.csv\")",
        "> ",
        "all_codes = colnames(mat_mob_p)",
        "> ",
        "rownames(mat_mob_p) = all_codes",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "\r \u001B[32m■■■■■■■                         \u001B[39m  20% |  ETA:  5s\r\r \u001B[32m■■■■■■■■■■■■■                   \u001B[39m  40% |  ETA:  4s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■             \u001B[39m  60% |  ETA:  3s\r\r \u001B[32m■■■■■■■■■■■■■■■■■■■■■■■■■       \u001B[39m  80% |  ETA:  1s\r\r                                                   \r",
        "Error in endswith(.dest_dir, \"/\") : could not find function \"endswith\"\n",
        "> ",
        "# run p_spillover.R to obtain the file below ",
        "> ",
        "# from df_burden which contains 205 UN-adj worldpop data per country ",
        "> ",
        "df_burden = read.csv('chikX/data/df_burden_with_pop_size_2015_spillover.csv')",
        "> ",
        "# load mobility matrix for country codes with mobility data ",
        "> ",
        "mat_mob_p = read.csv(\"LassaX/data_chik/mat_mob_prob.csv\")",
        "> ",
        "all_codes = colnames(mat_mob_p)",
        "> ",
        "rownames(mat_mob_p) = all_codes",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "> ",
        "source('chikX/utils/CHIK-X_spread.R')",
        "\nRestarting R session...\n\n"
    ]
}